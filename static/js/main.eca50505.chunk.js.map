{"version":3,"sources":["hooks/useWordle.js","components/Row.js","components/Grid.js","components/Keypad.js","components/Modal.js","components/Wordle.js","App.js","index.js"],"names":["useWordle","solution","_useState","useState","_useState2","Object","slicedToArray","turn","setTurn","_useState3","_useState4","currentguess","setcurrentguess","_useState5","toConsumableArray","Array","_useState6","guesses","setGuesses","_useState7","_useState8","history","setHistory","_useState9","_useState10","iscorrect","setisCorrect","_useState11","_useState12","usedKeys","setUsedKeys","handleKeyup","_ref","key","console","log","length","includes","formatguess","previousguesses","newguess","prevhistory","concat","prevturn","prevUsedKeys","forEach","l","currentColor","color","addguess","solutionarray","formattedarray","map","i","indexOf","test","prev","slice","Row","guess","react_default","a","createElement","className","letters","split","letter","_","Grid","g","Keypad","setLetters","useEffect","fetch","then","res","json","Modal","isCorrect","Wordle","_useWordle","showModal","setShowModal","window","addEventListener","removeEventListener","setTimeout","ThemeContext","createContext","App","modalOpen","setModalOpen","theme","setTheme","toggleTheme","curr","setSolution","randomsolution","now","Date","start","getFullYear","diff","Math","floor","getDayOfTheYear","word","Provider","value","id","onClick","src","react_switch_default","onChange","checked","height","width","style","backgroundColor","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.eca50505.chunk.js","sourcesContent":["import { useState } from \"react\"\r\n\r\nconst useWordle = (solution) => {\r\n    //on which turn the user is at start he will be on 0th guess\r\n    const [turn, setTurn] = useState(0);\r\n    //what is the current guess which is empty at the begining\r\n    const [currentguess, setcurrentguess] = useState('');\r\n    // we will store each guess in an array\r\n    const [guesses, setGuesses] = useState([...Array(6)]);\r\n    //we will store the previous guesses in a string format\r\n    const [history, setHistory] = useState([]);\r\n    //terminate if the guess is right and it will be false at start\r\n    const [iscorrect, setisCorrect] = useState(false);\r\n    //coloring and making keypad \r\n    const [usedKeys, setUsedKeys] = useState({})\r\n    //we will format a guess into an array of object of letters\r\n    const formatguess = () => {\r\n        let solutionarray = [...solution];\r\n        let formattedarray = [...currentguess].map((l) => {\r\n            return {\r\n                key: l,\r\n                color: 'grey'\r\n            }\r\n        })\r\n        formattedarray.forEach((l, i) => {\r\n            if (solution[i] === l.key) {\r\n                formattedarray[i].color = 'green';\r\n                solutionarray[i] = null;\r\n            }\r\n        })\r\n        formattedarray.forEach((l, i) => {\r\n            if (solutionarray.includes(l.key) && l.color !== 'green') {\r\n                formattedarray[i].color = 'yellow';\r\n                solutionarray[solutionarray.indexOf(l.key)] = null;\r\n            }\r\n        })\r\n        return formattedarray;\r\n    }\r\n\r\n    //we will add a new guess here\r\n    const addguess = (formatguess) => {\r\n        if (currentguess === solution) {\r\n            setisCorrect(true);\r\n        }\r\n        setGuesses(previousguesses => {\r\n            let newguess = [...previousguesses];\r\n            newguess[turn] = formatguess;\r\n            return newguess;\r\n        })\r\n        setHistory(prevhistory => {\r\n            return [...prevhistory, currentguess];\r\n        })\r\n        setTurn(prevturn => {\r\n            return prevturn += 1;\r\n        })\r\n        setUsedKeys(prevUsedKeys => {\r\n            formatguess.forEach(l => \r\n                {\r\n                const currentColor = prevUsedKeys[l.key]\r\n                if (l.color === 'grey' && currentColor !== ('green' || 'yellow')) {\r\n                    prevUsedKeys[l.key] = 'grey'\r\n                    return\r\n                }\r\n                if (l.color === 'yellow' && currentColor !== 'green') {\r\n                    prevUsedKeys[l.key] = 'yellow'\r\n                    return\r\n                }\r\n                if (l.color === 'green') {\r\n                    prevUsedKeys[l.key] = 'green'\r\n                    return\r\n                }\r\n                \r\n            })\r\n\r\n            return prevUsedKeys\r\n        })\r\n        setcurrentguess('')\r\n    }\r\n\r\n    //we will handle the keyup events here\r\n    const handleKeyup = ({ key }) => {\r\n\r\n        if (key === 'Enter') {\r\n            if (turn > 5) {\r\n                console.log('You have exhausted all your turns');\r\n                return;\r\n            }\r\n            if (currentguess.length !== 5) {\r\n                console.log('You should enter a 5 letter word');\r\n                return;\r\n            }\r\n            if (history.includes(currentguess)) {\r\n                console.log('You have already tried this word');\r\n                return;\r\n            }\r\n            const formatted = formatguess();\r\n            addguess(formatted);\r\n        }\r\n\r\n        if (key === 'Backspace') {\r\n            setcurrentguess(prev => prev.slice(0, -1));\r\n            return;\r\n        }\r\n\r\n        if (/^[A-Za-z]$/.test(key)) {\r\n            if (currentguess.length < 5) {\r\n                setcurrentguess(prev => prev + key)\r\n            }\r\n        }\r\n    }\r\n    return { turn, currentguess, guesses, iscorrect, usedKeys ,handleKeyup };\r\n}\r\n\r\nexport default useWordle","import React from 'react'\r\nexport default function Row({ currentguess, guess }) {\r\n\r\n    if (guess) {\r\n        return (\r\n            <div className='row past'>\r\n                {\r\n                    guess.map((l, i) => (\r\n                        <div key={i} className={l.color}>{l.key}</div>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n    if (currentguess) {\r\n        let letters = currentguess.split('')\r\n\r\n        return (\r\n            <div className=\"row current\">\r\n                {letters.map((letter, i) => (\r\n                    <div key={i} className=\"filled\">{letter}</div>\r\n                ))}\r\n                {[...Array(5 - letters.length)].map((_, i) => (\r\n                    <div key={i}></div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Row from './Row'\r\nexport default function Grid({ guesses, currentguess, turn }) {\r\n    return (\r\n        <div>\r\n            {\r\n                guesses.map((g, i) => {\r\n                    if (turn === i) {\r\n                        return <Row key={i} currentguess={currentguess} />\r\n                    }\r\n                    return <Row key={i} guess={g} />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nexport default function Keypad({ usedKeys }) {\r\n    const [letters, setLetters] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetch('https://api.npoint.io/5e26cb63699c4aa9ae3f')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                setLetters(json)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"keypad\">\r\n            {letters && letters.map(l => {\r\n                const color = usedKeys[l.key]\r\n                return (\r\n                    <div key={l.key} className={color}>{l.key}</div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Modal({ isCorrect, solution, turn }) {\r\n    return (\r\n        <div className=\"modal\">\r\n            {isCorrect && turn===6 && (\r\n                <div>\r\n                    <h1>You Win!</h1>\r\n                    <p className=\"solution\">{solution}</p>\r\n                        <p>Good! You found the solution in {turn} guesses :)</p>\r\n                </div>\r\n            )}\r\n            {isCorrect && turn===5 && (\r\n                <div>\r\n                    <h1>You Win!</h1>\r\n                    <p className=\"solution\">{solution}</p>\r\n                        <p>Nice! You found the solution in {turn} guesses :)</p>\r\n                </div>\r\n            )}\r\n            {isCorrect && turn===4 && (\r\n                <div>\r\n                    <h1>You Win!</h1>\r\n                    <p className=\"solution\">{solution}</p>\r\n                        <p>Awesome! You found the solution in {turn} guesses :)</p>\r\n                </div>\r\n            )}\r\n            {isCorrect && turn===3 && (\r\n                <div>\r\n                    <h1>You Win!</h1>\r\n                    <p className=\"solution\">{solution}</p>\r\n                        <p>Excellent! You found the solution in {turn} guesses :)</p>\r\n                </div>\r\n            )}\r\n            {isCorrect && turn===2 && (\r\n                <div>\r\n                    <h1>You Win!</h1>\r\n                    <p className=\"solution\">{solution}</p>\r\n                        <p>Splendid! You found the solution in {turn} guesses :)</p>\r\n                </div>\r\n            )}\r\n            {isCorrect && turn===1 && (\r\n                <div>\r\n                    <h1>You Win!</h1>\r\n                    <p className=\"solution\">{solution}</p>\r\n                        <p>You guessed it in 1st turn? Did you cheated? :)</p>\r\n                </div>\r\n            )}\r\n            {!isCorrect && (\r\n                <div>\r\n                    <h1>Nevermind</h1>\r\n                    <p className=\"solution\">{solution}</p>\r\n                    <p>Better luck next time :)</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport useWordle from '../hooks/useWordle'\r\nimport Grid from './Grid';\r\nimport Keypad from './Keypad';\r\nimport Modal from './Modal';\r\nexport default function Wordle({ solution }) {\r\n    const { currentguess, guesses, turn, iscorrect, usedKeys, handleKeyup } = useWordle(solution);\r\n    const [showModal, setShowModal] = useState(false)\r\n    useEffect(() => {\r\n        window.addEventListener(\"keyup\", handleKeyup);\r\n        return () => {\r\n            window.removeEventListener(\"keyup\", handleKeyup);\r\n        }\r\n    }, [handleKeyup])\r\n\r\n    if (iscorrect) {\r\n        setTimeout(() => setShowModal(true), 2000)\r\n        //console.log('congrats, you win')\r\n        window.removeEventListener('keyup', handleKeyup)\r\n    }\r\n    if (turn > 5) {\r\n        setTimeout(() => setShowModal(true), 2000)\r\n        //console.log('unlucky, out of guesses')\r\n        window.removeEventListener('keyup', handleKeyup)\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(guesses, turn, iscorrect)\r\n    }, [guesses, turn, iscorrect])\r\n\r\n    return (\r\n        <div>\r\n            {/* <div>{solution}</div> */}\r\n            {/* <div>current guess- {currentguess}</div> */}\r\n            <Grid guesses={guesses} currentguess={currentguess} turn={turn} />\r\n            <Keypad usedKeys={usedKeys} />\r\n            {showModal && <Modal isCorrect={iscorrect} turn={turn} solution={solution} />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState, createContext } from 'react';\nimport Wordle from './components/Wordle';\nimport ReactSwitch from \"react-switch\";\nexport const ThemeContext = createContext(null);\nfunction App() {\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const [theme, setTheme] = useState(\"dark\");\n\n  const toggleTheme = () => {\n    setTheme((curr) => (curr === \"light\" ? \"dark\" : \"light\"));\n  };\n  const [solution, setSolution] = useState(null);\n  const getDayOfTheYear = () => {\n    const now = new Date();\n    const start = new Date(now.getFullYear(), 0, 0);\n    const diff = now - start;\n    const oneDay = 1000 * 60 * 60 * 24;\n    const day = Math.floor(diff / oneDay);\n    return day;\n  };\n  useEffect(() => {\n    fetch('https://api.npoint.io/542eb78581babb21b9f3')\n      .then(res => res.json())\n      .then(json => {\n        //we will pick up a random solution\n        const randomsolution = json[getDayOfTheYear()];\n        //setting the randome solution \n        setSolution(randomsolution.word);\n      })\n  }, [setSolution]\n  )\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      <div className=\"toggle\" id={theme}>\n        {modalOpen && <div className=\"modalBackground\">\n          <div className=\"modalContainer\">\n            <div className=\"titleCloseBtn\">\n              <button onClick={() => { setModalOpen(false); }}>\n                <span>\n                  ✖\n                </span>\n              </button>\n            </div>\n            <img src={theme == \"dark\" ? \"https://i.ibb.co/wLrpZKS/helpb.png\" : \"https://i.ibb.co/tXzr3RG/helpw.png\"} id='imag' />\n          </div>\n        </div>\n        }\n        <nav>\n          {/* <img src={theme == \"dark\" ? `../img/img.png` : `https://i.ibb.co/1v2CLtd/imgd.png`} onClick={() => { setModalOpen(true); }} /> */}\n          <h1>Wordle</h1>\n          <div className=\"switch\">\n            <span>☀️</span>\n            <ReactSwitch onChange={toggleTheme} checked={theme === \"dark\"} height={20} width={34} />\n            <span>🌒</span>\n          </div>\n        </nav>\n        <hr style={theme === \"light\" ? { color: '#000000', height: 1, backgroundColor: '#000000' } :\n          { color: '#ffffff', height: .8, backgroundColor: '#ffffff', }} />\n        {solution  && <Wordle solution={solution} />}\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App\n\n/* \ndata we need to track:\n  -- solution\n    -- 5 letter string, e.g. 'drain'\n  -- past guesses\n    -- an array of past guesses\n    -- each past guess is an array of letter objects [{}, {}, {}, {}, {}]\n    -- each object represents a letter in the guess word {letter: 'a', color: 'yellow'}\n  -- current guess\n    -- string 'hello'\n  -- keypad letters\n    -- array of letter objects [{key: 'a', color: 'green'}, {}, {} ...]\n  -- number of turns\n    -- an integer 0 - 6\ngame process:\n  -- entering words:\n    -- user enters a letter & a square is filled with that letter\n    -- when a user hits delete it deletes the previous letter\n    -- when a user hits enter it submits the word\n      -- if all squares are not filled with letters then the word is not submitted\n      -- if that word has already been used in a prev guess then the word is not submitted\n  -- checking submitted words:\n    -- each letter is checked to see if it matches to the solution\n    -- each letter is assigned a color based on it's inclusion in the solution\n      -- exact matches (correct position in the solution) are green\n      -- partial matches (in the solution but not the correct position) are yellow\n      -- none-matches (not in the solution at all) are grey\n    -- the guess is added the grid with the correct colors\n    -- the current guess moves to the next row\n    -- the keypad letters are updated (colors)\n  -- ending the game:\n    -- when the guessed word fully matches the solution\n      -- modal to say 'well done'\n    -- when the user runs out of guesses\n      -- modal to say 'unlucky'\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}